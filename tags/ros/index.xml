<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ROS on LinuxUK</title>
    <link>http://www.linuxuk.org/tags/ros/</link>
    <description>Recent content in ROS on LinuxUK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jamie Bennett</copyright>
    <lastBuildDate>Wed, 17 Oct 2018 10:37:08 +0100</lastBuildDate>
    
	<atom:link href="http://www.linuxuk.org/tags/ros/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deprecating software is hard; why the move to ROS 2 is causing heated debate</title>
      <link>http://www.linuxuk.org/post/deprecating_software_is_hard/</link>
      <pubDate>Wed, 17 Oct 2018 10:37:08 +0100</pubDate>
      
      <guid>http://www.linuxuk.org/post/deprecating_software_is_hard/</guid>
      <description>Software never stays the same Inevitably, all software is destined to die. Whether that is through becoming end of life (EOL), obsolete, or unused, or through the code being rewritten and replaced, software is not static and nor should it be. Bug fixes, security updates, and new functionality ensure that code churn, or the number of lines being modified, keeps developers busy and projects healthy. But, what happens when software completely changes?</description>
    </item>
    
  </channel>
</rss>